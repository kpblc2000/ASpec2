//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(ASpecWpfDbFirstTest.Data.NPConConnectionString),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets153bc0bdfa09adb57f3a27fc506425b2eaac38ac669431ea52dd2f3badfda95a))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets153bc0bdfa09adb57f3a27fc506425b2eaac38ac669431ea52dd2f3badfda95a : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "153bc0bdfa09adb57f3a27fc506425b2eaac38ac669431ea52dd2f3badfda95a"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "Хранилище NPConContextContainer.album")
            {
                return GetView0();
            }

            if (extentName == "Хранилище NPConContextContainer.factory")
            {
                return GetView1();
            }

            if (extentName == "NPConConnectionString.album")
            {
                return GetView2();
            }

            if (extentName == "NPConConnectionString.factory")
            {
                return GetView3();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for Хранилище NPConContextContainer.album.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing album
        [Хранилище NPConContext.album](T1.[album.id_album], T1.[album.name_alb], T1.[album.description_alb], T1.[album.in_design], T1.[album.compr_name], T1.[album.created_alb_orig_login], T1.[album.file_path], T1.[album.is_end_prod_alb], T1.[album.id_fact])
    FROM (
        SELECT 
            T.id_album AS [album.id_album], 
            T.name_alb AS [album.name_alb], 
            T.description_alb AS [album.description_alb], 
            T.in_design AS [album.in_design], 
            T.compr_name AS [album.compr_name], 
            T.created_alb_orig_login AS [album.created_alb_orig_login], 
            T.file_path AS [album.file_path], 
            T.is_end_prod_alb AS [album.is_end_prod_alb], 
            T.id_fact AS [album.id_fact], 
            True AS _from0
        FROM NPConConnectionString.album AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for Хранилище NPConContextContainer.factory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing factory
        [Хранилище NPConContext.factory](T1.[factory.id_fact], T1.[factory.f_name], T1.[factory.f_prefix])
    FROM (
        SELECT 
            T.id_fact AS [factory.id_fact], 
            T.f_name AS [factory.f_name], 
            T.f_prefix AS [factory.f_prefix], 
            True AS _from0
        FROM NPConConnectionString.factory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NPConConnectionString.album.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing album
        [NPConContext.album](T1.[album.id_album], T1.[album.name_alb], T1.[album.description_alb], T1.[album.in_design], T1.[album.compr_name], T1.[album.created_alb_orig_login], T1.[album.file_path], T1.[album.is_end_prod_alb], T1.[album.id_fact])
    FROM (
        SELECT 
            T.id_album AS [album.id_album], 
            T.name_alb AS [album.name_alb], 
            T.description_alb AS [album.description_alb], 
            T.in_design AS [album.in_design], 
            T.compr_name AS [album.compr_name], 
            T.created_alb_orig_login AS [album.created_alb_orig_login], 
            T.file_path AS [album.file_path], 
            T.is_end_prod_alb AS [album.is_end_prod_alb], 
            T.id_fact AS [album.id_fact], 
            True AS _from0
        FROM [Хранилище NPConContextContainer].album AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NPConConnectionString.factory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing factory
        [NPConContext.factory](T1.[factory.id_fact], T1.[factory.f_name], T1.[factory.f_prefix])
    FROM (
        SELECT 
            T.id_fact AS [factory.id_fact], 
            T.f_name AS [factory.f_name], 
            T.f_prefix AS [factory.f_prefix], 
            True AS _from0
        FROM [Хранилище NPConContextContainer].factory AS T
    ) AS T1");
        }
    }
}
